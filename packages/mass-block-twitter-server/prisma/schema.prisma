// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"] // change from default
}

datasource db {
  provider = "sqlite" // d1 is sql base database
  url      = env("DATABASE_URL")
}

// Create a simple model database
model User {
  id               String        @id
  screenName       String
  name             String
  description      String?
  profileImageUrl  String?
  accountCreatedAt DateTime?
  spamReportCount  Int           @default(0)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  Tweet            Tweet[]
  spamUser         SpamReport[]  @relation("SpamUser")
  reportUser       SpamReport[]  @relation("ReportUser")
  ModList          ModList[]
  ModListUser      ModListUser[]
}

model Tweet {
  id              String       @id
  text            String
  media           Json?
  publishedAt     DateTime
  userId          String
  user            User         @relation(fields: [userId], references: [id])
  SpamReport      SpamReport[]
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  spamReportCount Int          @default(0)
}

enum PageType {
  timeline
  tweetDetail
  other
}

model SpamReport {
  id           String   @id @default(uuid())
  spamUser     User     @relation("SpamUser", fields: [spamUserId], references: [id])
  spamUserId   String
  reportUser   User     @relation("ReportUser", fields: [reportUserId], references: [id])
  reportUserId String
  spamTweet    Tweet    @relation(fields: [spamTweetId], references: [id])
  spamTweetId  String
  pageType     PageType
  pageUrl      String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([spamUserId, reportUserId, spamTweetId])
  @@index([spamUserId, reportUserId])
  @@index([spamUserId])
  @@index([reportUserId])
  @@index([createdAt])
}

model LocalUser {
  id                  String                @id @default(uuid())
  email               String                @unique
  password            String // sha256
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  lastLogin           DateTime              @default(now())
  Payment             Payment[]
  isPro               Boolean               @default(false)
  emailVerified       Boolean               @default(false)
  ModList             ModList[]
  ModListSubscription ModListSubscription[]
}

enum PaymentStatus {
  pending
  success
  failed
}

model Payment {
  id          String        @id @default(uuid())
  localUserId String
  localUser   LocalUser     @relation(fields: [localUserId], references: [id])
  type        String
  amount      Float
  status      PaymentStatus
  countryCode String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model ModList {
  id                  String                @id // ulid https://github.com/ulid/spec
  name                String
  description         String?
  avatar              String?
  userCount           Int                   @default(0)
  subscriptionCount   Int                   @default(0)
  localUserId         String
  localUser           LocalUser             @relation(fields: [localUserId], references: [id])
  twitterUserId       String
  twitterUser         User                  @relation(fields: [twitterUserId], references: [id])
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  ModListUser         ModListUser[]
  ModListSubscription ModListSubscription[]

  @@index([name])
  @@index([description])
}

model ModListUser {
  id            String   @id
  modListId     String
  modList       ModList  @relation(fields: [modListId], references: [id])
  twitterUserId String // spam twitter user id
  twitterUser   User     @relation(fields: [twitterUserId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([modListId, twitterUserId])
}

model ModListSubscription {
  id          String    @id
  modListId   String
  modList     ModList   @relation(fields: [modListId], references: [id])
  localUserId String // subscriber local user id
  localUser   LocalUser @relation(fields: [localUserId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([modListId, localUserId])
}
